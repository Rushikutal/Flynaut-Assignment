const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('./models/user'); // Assuming you have a User model

// Configure Passport.js
passport.use(new LocalStrategy({
    usernameField: 'email', // Assuming email is used as the username field
    passwordField: 'password' // Assuming password is the password field
}, (email, password, done) => {
    // Find the user by email
    User.findOne({ email: email }, (err, user) => {
        if (err) { return done(err); }
        if (!user) {
            return done(null, false, { message: 'Incorrect email or password.' });
        }
        // Validate the password
        if (!user.validPassword(password)) {
            return done(null, false, { message: 'Incorrect email or password.' });
        }
        return done(null, user); // Authentication successful
    });
}));
const jwt = require('jsonwebtoken');
const secretKey = 'your-secret-key';

// Token verification middleware
const verifyToken = (req, res, next) => {
    const token = req.headers.authorization;

    if (!token) {
        return res.status(401).json({ message: 'No token provided.' });
    }

    jwt.verify(token, secretKey, (err, decoded) => {
        if (err) {
            return res.status(403).json({ message: 'Failed to authenticate token.' });
        }

        req.user = decoded; // Attach decoded user information to the request object
        next();
    });
};

// Example usage
app.get('/protected-route', verifyToken, (req, res) => {
    // Token is valid, proceed with the protected route logic
    // Access the user information from req.user
    res.json({ message: 'Access granted.' });
});
const promise1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('Promise 1 resolved.');
    }, 2000);
});

const promise2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        reject(new Error('Promise 2 rejected.'));
    }, 3000);
});

Promise.all([promise1, promise2])
    .then((results) => {
        console.log(results); // This will not execute due to promise2 rejection
    })
    .catch((error) => {
        console.error(error.message); // Output: Promise 2 rejected.
    });
const User = require('./models/user');
const Comment = require('./models/comment');

User.aggregate([
    {
        $lookup: {
            from: 'comments',
            localField: '_id',
            foreignField: 'userId